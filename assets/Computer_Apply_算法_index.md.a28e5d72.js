import{_ as t,o as a,c as e,Q as r}from"./chunks/framework.32dba02b.js";const _=JSON.parse('{"title":"算法","description":"","frontmatter":{},"headers":[],"relativePath":"Computer_Apply/算法/index.md","filePath":"Computer_Apply/算法/index.md","lastUpdated":1708148918000}'),o={name:"Computer_Apply/算法/index.md"},d=r('<h1 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h1><blockquote><p>算法（英语：algorithm），在数学（算学）和计算机科学之中，指一个被定义好的、计算机可施行其指示的有限步骤或次序，常用于计算、数据处理和自动推理。算法是有效方法，包含一系列定义清晰的指令，并可于有限的时间及空间内清楚的表述出来。</p></blockquote><h2 id="特征" tabindex="-1">特征 <a class="header-anchor" href="#特征" aria-label="Permalink to &quot;特征&quot;">​</a></h2><h3 id="输入" tabindex="-1">输入 <a class="header-anchor" href="#输入" aria-label="Permalink to &quot;输入&quot;">​</a></h3><p>一个算法必须有零个或以上输入量。</p><h3 id="输出" tabindex="-1">输出 <a class="header-anchor" href="#输出" aria-label="Permalink to &quot;输出&quot;">​</a></h3><p>一个算法应有一个或以上输出量，输出量是算法计算的结果。</p><h3 id="明确性" tabindex="-1">明确性 <a class="header-anchor" href="#明确性" aria-label="Permalink to &quot;明确性&quot;">​</a></h3><p>算法的描述必须无歧义，以保证算法的实际执行结果是精确地符合要求或期望，通常要求实际执行结果是确定的。</p><h3 id="有限性" tabindex="-1">有限性 <a class="header-anchor" href="#有限性" aria-label="Permalink to &quot;有限性&quot;">​</a></h3><p>依据图灵的定义，一个算法是能够被任何图灵完备系统模拟的一串运算，而图灵机只有有限个状态、有限个输入符号和有限个转移函数（指令）。而一些定义更规定算法必须在有限个步骤内完成任务。</p><h3 id="有效性" tabindex="-1">有效性 <a class="header-anchor" href="#有效性" aria-label="Permalink to &quot;有效性&quot;">​</a></h3><p>又称可行性。能够实现，算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现。</p><h2 id="算法效率" tabindex="-1">算法效率 <a class="header-anchor" href="#算法效率" aria-label="Permalink to &quot;算法效率&quot;">​</a></h2><h3 id="时间复杂度-大o表示法" tabindex="-1">时间复杂度（大O表示法） <a class="header-anchor" href="#时间复杂度-大o表示法" aria-label="Permalink to &quot;时间复杂度（大O表示法）&quot;">​</a></h3><table><thead><tr><th>名称</th><th>运行时间</th><th>运行时间举例</th></tr></thead><tbody><tr><td>常数时间</td><td><strong>O(1)</strong></td><td>10</td></tr><tr><td>对数时间</td><td><strong>O(log(n))</strong></td><td>log n, log n^2</td></tr><tr><td>线性时间</td><td><strong>O(n)</strong></td><td>n</td></tr><tr><td>线性对数时间</td><td><strong>O(nlog(n))</strong></td><td>n log n, log n!</td></tr><tr><td>二次时间</td><td><strong>O(n^2)</strong></td><td>n^2</td></tr><tr><td>三次时间</td><td><strong>O(n^3)</strong></td><td>n^3</td></tr><tr><td>指数时间</td><td><strong>2^{O(n)}</strong></td><td>1.1^n, 10^n</td></tr></tbody></table><p><code>推导大O表示法的方式</code></p><ol><li>用常量 1 取代运行时间中所有的加法常量。</li><li>在修改后的运行次数函数中,只保留最高阶项。</li><li>如果最高存在且不为 1 ,则去除与这个项相乘的常数。</li></ol><h3 id="空间复杂度" tabindex="-1">空间复杂度 <a class="header-anchor" href="#空间复杂度" aria-label="Permalink to &quot;空间复杂度&quot;">​</a></h3><blockquote><p>算法的空间复杂度是指算法需要消耗的空间资源。其计算和表示方法与时间复杂度类似，一般都用复杂度的渐近性来表示。</p><p>同时间复杂度相比，空间复杂度的分析要简单得多。</p></blockquote><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">wiki 算法</a></li></ul>',22),n=[d];function l(i,h,s,c,p,u){return a(),e("div",null,n)}const q=t(o,[["render",l]]);export{_ as __pageData,q as default};
