import{_ as e,o as l,c as a,Q as t}from"./chunks/framework.32dba02b.js";const m=JSON.parse('{"title":"优化重绘和重排","description":"","frontmatter":{},"headers":[],"relativePath":"Computer_Theory/计算机网络/Optimization/重绘与重排.md","filePath":"Computer_Theory/计算机网络/Optimization/重绘与重排.md","lastUpdated":1708332341000}'),i={name:"Computer_Theory/计算机网络/Optimization/重绘与重排.md"},o=t('<h1 id="优化重绘和重排" tabindex="-1">优化重绘和重排 <a class="header-anchor" href="#优化重绘和重排" aria-label="Permalink to &quot;优化重绘和重排&quot;">​</a></h1><blockquote><p>理解此概念需要先行了解关键渲染路径（CRP，Critical Rendering Path）相关概念。</p></blockquote><h2 id="重绘" tabindex="-1">重绘 <a class="header-anchor" href="#重绘" aria-label="Permalink to &quot;重绘&quot;">​</a></h2><blockquote><p>当一个元素的外观发生改变，但没有改变布局，重新把元素外观绘制出来的过程，叫做重绘。</p></blockquote><h2 id="重排" tabindex="-1">重排 <a class="header-anchor" href="#重排" aria-label="Permalink to &quot;重排&quot;">​</a></h2><blockquote><p>当DOM的变化影响了元素的几何信息（元素的的位置和尺寸大小），浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。</p></blockquote><h3 id="触发时机" tabindex="-1">触发时机 <a class="header-anchor" href="#触发时机" aria-label="Permalink to &quot;触发时机&quot;">​</a></h3><ul><li>页面初始渲染，这是开销最大的一次重排。</li><li>添加/删除可见的DOM元素。</li><li>改变元素位置。</li><li>改变元素尺寸，比如边距、填充、边框、宽度和高度等。</li><li>改变元素内容，比如文字数量，图片大小等。</li><li>改变元素字体大小。</li><li>改变浏览器窗口尺寸，比如resize事件发生时。</li><li>激活CSS伪类（例如：<code>:hover</code>）。</li><li>设置 style 属性的值，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow。</li><li>查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等，除此之外，当我们调用 <code>getComputedStyle</code>方法，或者IE里的 <code>currentStyle</code> 时，也会触发重排，原理是一样的，都为求一个“即时性”和“准确性”。</li></ul><p>由于浏览器渲染界面是基于流式布局模型的，所以触发重排时会对周围 DOM 重新排列，影响的范围有两种：</p><ul><li>全局范围：从根节点 html 开始对整个渲染树进行重新布局。</li><li>局部范围：对渲染树的某部分或某一个渲染对象进行重新布局。</li></ul><h2 id="优化方案" tabindex="-1">优化方案 <a class="header-anchor" href="#优化方案" aria-label="Permalink to &quot;优化方案&quot;">​</a></h2><blockquote><p>重排的代价是高昂的，会破坏用户体验，并且让 UI 展示非常迟缓。通过减少重排的负面影响来提高用户体验的最简单方式就是尽可能的减少重排次数，重排范围。</p></blockquote><h3 id="减少重排范围" tabindex="-1">减少重排范围 <a class="header-anchor" href="#减少重排范围" aria-label="Permalink to &quot;减少重排范围&quot;">​</a></h3><ol><li>尽可能将修改应用到具体 DOM 元素上。</li><li>不使用 table 布局，很小的一个小改动都会造成整个 table 的重新布局。</li></ol><h3 id="减少重排次数" tabindex="-1">减少重排次数 <a class="header-anchor" href="#减少重排次数" aria-label="Permalink to &quot;减少重排次数&quot;">​</a></h3><ol><li>样式集中改变。</li><li>分离读写操作（读操作会导致清空渲染队列）。</li><li>将 DOM 离线。 <ul><li>display: none</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment" target="_blank" rel="noreferrer">documentFragment</a></li><li>复制节点操作</li></ul></li><li>元素脱离文档流。</li></ol>',16),r=[o];function n(c,h,d,s,u,_){return l(),a("div",null,r)}const b=e(i,[["render",n]]);export{m as __pageData,b as default};
