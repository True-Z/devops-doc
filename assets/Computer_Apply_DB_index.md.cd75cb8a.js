import{_ as t,o as e,c as r,Q as a}from"./chunks/framework.32dba02b.js";const y=JSON.parse('{"title":"简介","description":"","frontmatter":{},"headers":[],"relativePath":"Computer_Apply/DB/index.md","filePath":"Computer_Apply/DB/index.md","lastUpdated":1706764354000}'),n={name:"Computer_Apply/DB/index.md"},o=a('<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93#" target="_blank" rel="noreferrer">数据库</a> 简而言之可视为电子化的文件柜——存储电子文件的处所，用户可以对文件中的资料执行新增、截取、更新、删除等操作。</p><p>所谓“数据库”是以 <code>一定方式</code> 储存在一起、能予多个用户共享、具有尽可能小的冗余度、与应用程序彼此独立的数据集合。一个数据库由多个表空间（Tablespace）构成。</p></blockquote><h2 id="理论" tabindex="-1">理论 <a class="header-anchor" href="#理论" aria-label="Permalink to &quot;理论&quot;">​</a></h2><h3 id="cap-理论" tabindex="-1">CAP 理论 <a class="header-anchor" href="#cap-理论" aria-label="Permalink to &quot;CAP 理论&quot;">​</a></h3><p><strong>C（Consistency）一致性</strong></p><p>任何一个读操作总是能够读到之前完成的写操作的结果，也就是在分布式环境中，多点的数据是一致的，或者说，所有节点在同一时间具有相同的数据。</p><p><strong>A（Availability）可用性</strong></p><p>快速获取数据，可以在确定的时间内返回操作结果，保证每个请求不管成功或者失败都有响应。</p><p><strong>P（Tolerance of Network Partition）分区容忍性</strong></p><p>当出现网络分区的情况时（即系统中的一部分节点无法和其他节点进行通信），分离的系统也能够正常运行，也就是说，系统中任意信息的丢失或失败不会影响系统的继续运作。</p><h3 id="acid-模型" tabindex="-1">ACID 模型 <a class="header-anchor" href="#acid-模型" aria-label="Permalink to &quot;ACID 模型&quot;">​</a></h3><p><strong>A (Atomicity) 原子性</strong></p><p>事务必须是原子工作单元，对于其数据修改，要么全都执行，要么全都不执行，只要有一个操作失败，整个事务就失败，需要回滚。</p><p><strong>C (Consistency) 一致性</strong></p><p>数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</p><p><strong>I (Isolation) 独立性</strong></p><p>并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</p><p><strong>D (Durability) 持久性</strong></p><p>一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p><h3 id="base-模型" tabindex="-1">BASE 模型 <a class="header-anchor" href="#base-模型" aria-label="Permalink to &quot;BASE 模型&quot;">​</a></h3><p><strong>BA（Basically Availble）基本可用</strong></p><p>是指一个分布式系统的一部分发生问题变得不可用时，其他部分仍然可以正常使用，也就是允许分区失败的情形出现。</p><p><strong>S（Soft-state）软状态</strong></p><p>“软状态（soft-state）”是与“硬状态（hard-state）”相对应的一种提法。数据库保存的数据是“硬状态”时，可以保证数据一致性，即保证数据一直是正确的。“软状态”是指状态可以有一段时间不同步，具有一定的滞后性。</p><p><strong>E（Eventual consistency）最终一致性</strong></p><p>一致性的类型包括强一致性和弱一致性，二者的主要区别在于高并发的数据访问操作下，后续操作是否能够获取最新的数据。对于强一致性而言，当执行完一次更新操作后，后续的其他读操作就可以保证读到更新后的最新数据；反之，如果不能保证后续访问读到的都是更新后的最新数据，那么就是弱一致性。而最终一致性只不过是弱一致性的一种特例，允许后续的访问操作可以暂时读不到更新后的数据，但是经过一段时间之后，必须最终读到更新后的数据。</p><h3 id="最终一致性" tabindex="-1">最终一致性 <a class="header-anchor" href="#最终一致性" aria-label="Permalink to &quot;最终一致性&quot;">​</a></h3><p><strong>因果一致性</strong></p><p>如果进程A通知进程B它已更新了一个数据项，那么进程B的后续访问将获得A写入的最新值。而与进程A无因果关系的进程C的访问，仍然遵守一般的最终一致性规则。</p><p><strong>“读己之所写”一致性</strong></p><p>可以视为因果一致性的一个特例。当进程A自己执行一个更新操作之后，它自己总是可以访问到更新过的值，绝不会看到旧值。</p><p><strong>单调读一致性</strong></p><p>如果进程已经看到过数据对象的某个值，那么任何后续访问都不会返回在那个值之前的值。</p><p><strong>会话一致性</strong></p><p>它把访问存储系统的进程放到会话（session）的上下文中，只要会话还存在，系统就保证“读己之所写”一致性。如果由于某些失败情形令会话终止，就要建立新的会话，而且系统保证不会延续到新的会话。</p><p><strong>单调写一致性</strong></p><p>系统保证来自同一个进程的写操作顺序执行。系统必须保证这种程度的一致性，否则就非常难以编程了。</p><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><h3 id="sql" tabindex="-1">SQL <a class="header-anchor" href="#sql" aria-label="Permalink to &quot;SQL&quot;">​</a></h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/SQL" target="_blank" rel="noreferrer">结构化查询语言（Structured Query Language，SQL）</a> 是一种专门用来与数据库（DB）通信的语言。</p></blockquote><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%AE%9A%E7%BE%A9%E8%AA%9E%E8%A8%80" target="_blank" rel="noreferrer">数据定义语言（Data Definition Language，DDL）</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E6%93%8D%E7%B8%B1%E8%AA%9E%E8%A8%80" target="_blank" rel="noreferrer">数据操作语言（Data Manipulation Language，DML）</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%9F%A5%E8%A9%A2%E8%AA%9E%E8%A8%80" target="_blank" rel="noreferrer">数据查询语言（Data Query Language，DQL）</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E6%8E%A7%E5%88%B6%E8%AA%9E%E8%A8%80" target="_blank" rel="noreferrer">数据控制语言 (Data Control Language，DCL)</a></li></ul><h3 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93#" target="_blank" rel="noreferrer">数据库（database，DB）</a> 是一个以某种有组织的方式存储的数据集合。</p></blockquote><table><thead><tr><th style="text-align:right;"></th><th></th><th>description</th></tr></thead><tbody><tr><td style="text-align:right;"><strong>database</strong></td><td>数据库</td><td>保存有组织的数据的容器（通常是一个文件或一组文件）</td></tr><tr><td style="text-align:right;"><strong>table</strong></td><td>表</td><td>某种特定类型数据的结构化清单</td></tr><tr><td style="text-align:right;"><strong>schema</strong></td><td>模式</td><td>关于数据库和表的布局及特性的信息</td></tr><tr><td style="text-align:right;"><strong>column</strong></td><td>列</td><td>表中的一个字段。所有表都是由一个或多个列组成的</td></tr><tr><td style="text-align:right;"><strong>datatype</strong></td><td>数据类型</td><td>所容许的数据的类型。每个表列都有相应的数据类型，它限制（或容许）该列中存储的数据</td></tr><tr><td style="text-align:right;"><strong>row</strong></td><td>行</td><td>表中的一个记录</td></tr><tr><td style="text-align:right;"><strong>primary key</strong></td><td>主键</td><td>一列（或一组列），其值能够唯一区分表中每个行</td></tr></tbody></table><h3 id="数据库管理系统" tabindex="-1">数据库管理系统 <a class="header-anchor" href="#数据库管理系统" aria-label="Permalink to &quot;数据库管理系统&quot;">​</a></h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F" target="_blank" rel="noreferrer">数据库管理系统（Database Management System，DBMS）</a> 是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库。</p></blockquote><h3 id="rdbms-and-nosql-比较" tabindex="-1">RDBMS and NoSQL 比较 <a class="header-anchor" href="#rdbms-and-nosql-比较" aria-label="Permalink to &quot;RDBMS and NoSQL 比较&quot;">​</a></h3><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">RDBMS</th><th style="text-align:center;">NoSql</th><th>Ddsctiption</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>数据库原理</strong></td><td style="text-align:center;">完全支持</td><td style="text-align:center;">部分支持</td><td>RDBMS 有关系代数理论作为基础<br><br>NoSQL 没有统一的理论基础</td></tr><tr><td style="text-align:center;"><strong>数据规模</strong></td><td style="text-align:center;">大</td><td style="text-align:center;">超大</td><td>RDBMS 难以实现横向拓展，纵向拓展的空间也比较有限，性能会随着数据规模的增大而降低<br><br>NoSql 可以很容易通过添加更多设备来支持更大规模的数据</td></tr><tr><td style="text-align:center;"><strong>数据库模式</strong></td><td style="text-align:center;">固定</td><td style="text-align:center;">灵活</td><td>RDBMS 需要定义数据库模式，严格遵守数据定义和相关约束条件<br><br>NoSQL 不存在数据库模式，可以自由灵活定义并存储各种不同类型的数据</td></tr><tr><td style="text-align:center;"><strong>查询效率</strong></td><td style="text-align:center;">快</td><td style="text-align:center;">可以实现高效的简单查询<br>但是不具备高度结构化查询特性<br>复杂查询的性能不尽人意</td><td>RDBMS 借助于索引机制可以实现快速查询<br><br>NoSQL 没有面向复杂查询的索引，虽然 NoSQL 可以使用 MapReduce 来加速查询；<br>但在复杂查询方面的效率仍然不如 RDBMS</td></tr><tr><td style="text-align:center;"><strong>一致性</strong></td><td style="text-align:center;">强一致性</td><td style="text-align:center;">弱一致性</td><td>RDBMS 严格遵守事务 ACID 模型，可以保证事务强一致性<br><br>NoSQL 很多都放松了对事务 ACID 四性的要求，而是遵守 BASE 模型，只能保证最终一致性</td></tr><tr><td style="text-align:center;"><strong>数据完整性</strong></td><td style="text-align:center;">容易实现</td><td style="text-align:center;">很难实现</td><td>RDBMS 可以很容易实现数据完整性，比如通过主键或者非空约束来实现实体完整性；<br>通过主键、外键来实现参照完整性；通过约束或者触发器来实现用户自定义完整性<br><br>NoSQL 因为设计标准的不同很难实现</td></tr><tr><td style="text-align:center;"><strong>扩展性</strong></td><td style="text-align:center;">一般</td><td style="text-align:center;">好</td><td>RDBMS 很难实现横向拓展，纵向拓展的空间也比较有限<br><br>NoSQL 在设计之初就考虑了横向扩展的需求，可以很容易实现通过添加廉价设备实现扩展</td></tr><tr><td style="text-align:center;"><strong>可用性</strong></td><td style="text-align:center;">好</td><td style="text-align:center;">很好</td><td>RDBMS 任何时候都以保证数据一致性为优先目标，其次才是优化系统性能；<br>随着数据规模的增大，为了保证严格的一致性，只能提供相对较弱的可用性<br><br>NoSQL 大多数都能提供较高的可用性</td></tr><tr><td style="text-align:center;"><strong>标准化</strong></td><td style="text-align:center;">是</td><td style="text-align:center;">否</td><td>RDBMS 已经标准化（SQL）<br><br>NoSQL 没有行业标准，不同的 NoSQL 数据库都有自己的查询语言，很难规范应用程序接口</td></tr><tr><td style="text-align:center;"><strong>技术支持</strong></td><td style="text-align:center;">高</td><td style="text-align:center;">低</td><td>RDBMS 已经非常成熟，Oracle 等大型厂商都可以提供很好的技术支持<br><br>NoSQL 在技术支持方面仍然处于起步阶段，缺乏有力的技术支持</td></tr><tr><td style="text-align:center;"><strong>可扩展性</strong></td><td style="text-align:center;">复杂</td><td style="text-align:center;">复杂</td><td>RDBMS 需要专门的数据库管理员维护<br><br>NoSQL 虽然没有 RDBMS 复杂，也难以维护</td></tr></tbody></table><h3 id="关系型数据库-rdbms" tabindex="-1">关系型数据库（RDBMS） <a class="header-anchor" href="#关系型数据库-rdbms" aria-label="Permalink to &quot;关系型数据库（RDBMS）&quot;">​</a></h3><table><thead><tr><th style="text-align:right;"></th><th>Description</th></tr></thead><tbody><tr><td style="text-align:right;"><strong>DBMS</strong></td><td>Oracle、MySQL、PostgreSQL、SQLite</td></tr><tr><td style="text-align:right;"><strong>数据模型</strong></td><td>关系模型</td></tr><tr><td style="text-align:right;"><strong>典型应用</strong></td><td>需要做复杂处理的数据<br>对安全性要求高的数据</td></tr><tr><td style="text-align:right;"><strong>优点</strong></td><td>易理解、操作简单<br>支持 ACID 模型，可以确保数据的一致性<br>数据、服务稳定</td></tr><tr><td style="text-align:right;"><strong>缺点</strong></td><td>高并发下 IO 压力大<br>索引维护付出的代价大<br>水平扩展后带来的种种问题难处理<br>表结构扩展不方便<br>全文搜索功能弱</td></tr></tbody></table><h3 id="非关系型数据库-nosql" tabindex="-1">非关系型数据库（NoSQL） <a class="header-anchor" href="#非关系型数据库-nosql" aria-label="Permalink to &quot;非关系型数据库（NoSQL）&quot;">​</a></h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/NoSQL" target="_blank" rel="noreferrer">非关系型数据库 NoSQL（No Only SQL）</a> 广义上可以把所有不是关系型数据库的数据库统称为 。</p></blockquote><h4 id="键值数据库" tabindex="-1">键值数据库 <a class="header-anchor" href="#键值数据库" aria-label="Permalink to &quot;键值数据库&quot;">​</a></h4><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8" target="_blank" rel="noreferrer">键值数据库（Key–value database）</a> 就像在传统语言中使用的哈希表。你可以通过key来添加、查询或者删除数据，鉴于使用主键访问，所以会获得不错的性能及扩展性。</p></blockquote><table><thead><tr><th style="text-align:right;"></th><th>Description</th></tr></thead><tbody><tr><td style="text-align:right;"><strong>DBMS</strong></td><td>Riak、Redis、Memcached、Amazon’s Dynamo、Project Voldemort</td></tr><tr><td style="text-align:right;"><strong>数据模型</strong></td><td>键值对，键是一个字符串对象，值可以是任意类型的数据</td></tr><tr><td style="text-align:right;"><strong>典型应用</strong></td><td>设计频繁读写、拥有简单数据模型的应用<br>内容缓存，比如会话、配置文件、参数、购物车等<br>存储配置和用户数据信息的移动应用</td></tr><tr><td style="text-align:right;"><strong>优点</strong></td><td>拓展性号，灵活性好，大量写操作时性能高</td></tr><tr><td style="text-align:right;"><strong>缺点</strong></td><td>无法存储结构化信息，条件查询效率较低</td></tr></tbody></table><h4 id="列式数据库" tabindex="-1">列式数据库 <a class="header-anchor" href="#列式数据库" aria-label="Permalink to &quot;列式数据库&quot;">​</a></h4><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%88%97%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noreferrer">列式数据库（Column-oriented DBMS）</a> 将数据储存在列族（column family）中，一个列族存储经常被一起查询的相关数据。</p></blockquote><table><thead><tr><th style="text-align:right;"></th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:right;"><strong>DBMS</strong></td><td style="text-align:left;">BigTable、HBase、Cassandra、HadoopDB、GreenPlum、PNUTS</td></tr><tr><td style="text-align:right;"><strong>数据模型</strong></td><td style="text-align:left;">列族</td></tr><tr><td style="text-align:right;"><strong>典型应用</strong></td><td style="text-align:left;">分布是存储与管理<br>数据在地理上分布于多个数据中心的应用程序<br>可以容忍副本中存在短期不一致的情况的应用程序<br>拥有动态字段的应用程序<br>拥有潜在大量数据的应用程序</td></tr><tr><td style="text-align:right;"><strong>优点</strong></td><td style="text-align:left;">查找数据快，可扩展性强，容易进行分布式部署，复杂度低</td></tr><tr><td style="text-align:right;"><strong>缺点</strong></td><td style="text-align:left;">功能较少，大都不支持强事务一致性</td></tr></tbody></table><h4 id="面向文档数据库" tabindex="-1">面向文档数据库 <a class="header-anchor" href="#面向文档数据库" aria-label="Permalink to &quot;面向文档数据库&quot;">​</a></h4><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E6%96%87%E6%AA%94%E7%9A%84%E6%95%B8%E6%93%9A%E5%BA%AB" target="_blank" rel="noreferrer">面向文档数据库（Document-oriented database）</a> 会将数据以文档的形式储存。每个文档都是自包含的数据单元，是一系列数据项的集合。</p><p>数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用 XML、JSON 或者 JSONB 等多种形式存储。</p></blockquote><table><thead><tr><th style="text-align:right;"></th><th>Description</th></tr></thead><tbody><tr><td style="text-align:right;"><strong>DBMS</strong></td><td>MongoDB、CouchDB、Terrastore、RavenDB、SisoDB、RaptorDB、CloudKit、Perservere、Jackrabbit、</td></tr><tr><td style="text-align:right;"><strong>数据模型</strong></td><td>键值对，值既可以是简单的数据类型，如字符串、数字和日期等<br>也可以是复杂的类型，如有序列表和关联对象</td></tr><tr><td style="text-align:right;"><strong>典型应用</strong></td><td>存储、索引并管理面向文档的数据或者类似的半结构化数据，比如：<br>用于后台具有大量读写操作的网站<br>使用 JSON 数据结构的应用<br>使用嵌套结构等非规范化数据的应用程序</td></tr><tr><td style="text-align:right;"><strong>优点</strong></td><td>性能好（高并发），灵活性高，复杂度低，数据结构灵活<br>提供嵌入式文档功能，将经常查询的数据结构存储在同一个文档中<br>既可以根据键来构建索引，也可以根据内容构建索引</td></tr><tr><td style="text-align:right;"><strong>缺点</strong></td><td>缺乏统一的查询语法</td></tr></tbody></table><h4 id="图数据库" tabindex="-1">图数据库 <a class="header-anchor" href="#图数据库" aria-label="Permalink to &quot;图数据库&quot;">​</a></h4><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noreferrer">图数据库（graph database）</a> 允许我们将数据以图的方式储存。实体会被作为顶点，而实体之间的关系则会被作为边。</p></blockquote><table><thead><tr><th style="text-align:right;"></th><th>Description</th></tr></thead><tbody><tr><td style="text-align:right;"><strong>DBMS</strong></td><td>Neo4J、OrientDB、InfoGrid、Infinite Graph、GraphDB</td></tr><tr><td style="text-align:right;"><strong>数据模型</strong></td><td>图结构</td></tr><tr><td style="text-align:right;"><strong>典型应用</strong></td><td>专门用于处理具有高度相互关联关系的数据，比如：<br>社交网络、模式识别、依赖分析、推荐系统以及路径寻找等问题</td></tr><tr><td style="text-align:right;"><strong>优点</strong></td><td>灵活性高，支持复杂的图形算法，可用于构建复杂的关系图谱</td></tr><tr><td style="text-align:right;"><strong>缺点</strong></td><td>复杂度高，只能支持一定的数据结构</td></tr></tbody></table><h3 id="数据库管理员" tabindex="-1">数据库管理员 <a class="header-anchor" href="#数据库管理员" aria-label="Permalink to &quot;数据库管理员&quot;">​</a></h3><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%91%98" target="_blank" rel="noreferrer">数据库管理员（Database Administrator，DBA）</a> 是从事管理和维护数据库管理系统（DBMS）的相关工作人员的统称。</p></blockquote><h3 id="数据库系统" tabindex="-1">数据库系统 <a class="header-anchor" href="#数据库系统" aria-label="Permalink to &quot;数据库系统&quot;">​</a></h3><blockquote><p><strong>数据库系统（Database System，DBS）</strong> 由 DB、DBMS、DBA 共同组成。</p></blockquote><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><p><a href="https://www.dba.cn/book/sql/" target="_blank" rel="noreferrer">SQL 中文手册</a></p></li><li><p><a href="https://www.mysqlzh.com/" target="_blank" rel="noreferrer">MySQL 中文手册</a></p></li></ul>',70),d=[o];function l(i,s,g,h,b,p){return e(),r("div",null,d)}const x=t(n,[["render",l]]);export{y as __pageData,x as default};
