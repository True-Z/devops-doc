import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.32dba02b.js";const p="/devops-doc/assets/HTTP缓存.0b4143b2.png",o="/devops-doc/assets/三次握手.44d8fa19.png",e="/devops-doc/assets/HTTP请求报文结构.966f6676.png",t="/devops-doc/assets/HTTP响应报文结构.d63cce4d.png",c="/devops-doc/assets/关键渲染路径.0d0d9611.webp",r="/devops-doc/assets/四次挥手.d7194851.png",b=JSON.parse('{"title":"输入URL到浏览器呈现","description":"","frontmatter":{},"headers":[],"relativePath":"Computer_Theory/计算机网络/Point/输入URL到浏览器呈现.md","filePath":"Computer_Theory/计算机网络/Point/输入URL到浏览器呈现.md","lastUpdated":1708332341000}'),E={name:"Computer_Theory/计算机网络/Point/输入URL到浏览器呈现.md"},y=l('<h1 id="输入url到浏览器呈现" tabindex="-1">输入URL到浏览器呈现 <a class="header-anchor" href="#输入url到浏览器呈现" aria-label="Permalink to &quot;输入URL到浏览器呈现&quot;">​</a></h1><h2 id="_1-输入-url-按下回车-浏览器检查缓存" tabindex="-1">1. 输入 URL 按下回车，浏览器检查缓存 <a class="header-anchor" href="#_1-输入-url-按下回车-浏览器检查缓存" aria-label="Permalink to &quot;1. 输入 URL 按下回车，浏览器检查缓存&quot;">​</a></h2><h3 id="url-统一资源定位符" tabindex="-1">URL 统一资源定位符 <a class="header-anchor" href="#url-统一资源定位符" aria-label="Permalink to &quot;URL 统一资源定位符&quot;">​</a></h3><blockquote><p>URL 代表着是 <code>统一资源定位符</code>(Uniform Resource Locator)；URL 无非就是一个给定的独特资源在 Web 上的地址；理论上说，每个有效的 URL 都指向一个唯一的资源；这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等；而在实际中，也有一些例外，最常见的情况就是一个 URL 指向了不存在的或是被移动过的资源；由于通过 URL 呈现的资源和 URL 本身由 Web 服务器处理，因此 web 服务器的拥有者需要认真地维护资源以及与它关联的 URL。</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">http://www.example.com:80/path/to/myfile.html?key1</span><span style="color:#E1E4E8;">=value1&amp;key2</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">value2#SomewhereInTheDocument</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">http://www.example.com:80/path/to/myfile.html?key1</span><span style="color:#24292E;">=value1&amp;key2</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">value2#SomewhereInTheDocument</span></span></code></pre></div><table><thead><tr><th>Name</th><th>Detail</th><th>Discription</th></tr></thead><tbody><tr><td><strong>协议</strong></td><td>http://</td><td>它表明了浏览器必须使用何种协议，它通常都是 HTTP 协议或是 HTTP 协议的安全版，即 HTTPS；<br>Web 需要它们二者之一，但浏览器也知道如何处理其他协议，比如mailto:(打开邮件客户端)或者 ftp:(处理文件传输)。</td></tr><tr><td><strong>域名</strong></td><td><strong>www.example.com</strong></td><td>它表明正在请求哪个 Web 服务器，或者，可以直接使用IP address，但是因为它不太方便，所以它不经常在网络上使用。</td></tr><tr><td><strong>端口</strong></td><td>:80</td><td>它表示用于访问 Web 服务器上的资源的技术“门”，<br>如果 Web 服务器使用 HTTP 协议的标准端口(HTTP 为 80，HTTPS 为 443)来授予其资源的访问权限，则通常会被忽略；否则是强制性的。</td></tr><tr><td><strong>路径</strong></td><td>/path/to/myfile.html</td><td>是网络服务器上资源的路径；在 Web 的早期阶段，像这样的路径表示 Web 服务器上的物理文件位置；<br>如今，它主要是由没有任何物理现实的 Web 服务器处理的抽象。</td></tr><tr><td><strong>参数</strong></td><td>?key1=value1&amp;key2=value2</td><td>是提供给网络服务器的额外参数；这些参数是用 &amp; 符号分隔的键/值对列表；<br>在返回资源之前，Web服务器可以使用这些参数来执行额外的操作；<br>每个Web服务器都有自己关于参数的规则，唯一可靠的方式来知道特定Web服务器是否处理参数是通过询问Web服务器所有者。</td></tr><tr><td><strong>锚点</strong></td><td>#SomewhereInTheDocument</td><td>是资源本身的另一部分的锚点；锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向；<br>例如，在 HTML 文档上，浏览器将滚动到定义锚点的位置；在视频或音频文档上，浏览器将尝试转到锚代表的时间；<br>值得注意的是，＃后面的部分(也称为片段标识符)<code>从来没有发送到请求的服务器</code>。</td></tr></tbody></table><h3 id="http-缓存" tabindex="-1">HTTP 缓存 <a class="header-anchor" href="#http-缓存" aria-label="Permalink to &quot;HTTP 缓存&quot;">​</a></h3><blockquote><p>HTTP 缓存会存储与请求关联的响应，并将存储的响应复用于后续请求。</p></blockquote><p><img src="'+p+`" alt="img"></p><h4 id="强缓存与协商缓存的区别" tabindex="-1">强缓存与协商缓存的区别 <a class="header-anchor" href="#强缓存与协商缓存的区别" aria-label="Permalink to &quot;强缓存与协商缓存的区别&quot;">​</a></h4><table><thead><tr><th></th><th>获取资源形式</th><th>状态码</th><th>是否发送请求</th></tr></thead><tbody><tr><td><strong>强缓存</strong></td><td>缓存读取</td><td>200（from cache）</td><td>否</td></tr><tr><td><strong>协商缓存</strong></td><td>缓存读取</td><td>304（not modified）</td><td>是，需服务器验证告知缓存是否过期</td></tr></tbody></table><h4 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h4><blockquote><p>根据http 头中的 Expires 和 Cache-Control 两个字段进行判断来控制缓存是否命中。</p><p>如果命中，则直接在内存，状态码 200（from memory cache）或硬盘，状态码 200（from disk cache）中读取缓存数据，无需发送网络请求。</p></blockquote><h5 id="expires-http1-0" tabindex="-1">Expires（HTTP1.0） <a class="header-anchor" href="#expires-http1-0" aria-label="Permalink to &quot;Expires（HTTP1.0）&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">expires:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Thu,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Jan</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2023</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">11</span><span style="color:#9ECBFF;">:11:11</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">GMT</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">expires:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Thu,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">14</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Jan</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2023</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">11</span><span style="color:#032F62;">:11:11</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GMT</span></span></code></pre></div><ul><li><p><strong>工作原理</strong> - 当试图再次向服务器请求资源，浏览器就会对比本地时间和 Expires 的时间戳，如果本地时间小于 Expires 设定的过期时间，就直接从缓存中获取这个资源。</p></li><li><p><strong>痛点</strong> - 由于 Expires 的时间戳是服务器定义的，而本地时间的取值来自客户端，因此 expires 的工作机制对于客户端时间和服务器时间的一致性要求极高，如果两者的时间存在时差，会带来意料之外的结果。</p></li></ul><h5 id="cache-control-http1-1" tabindex="-1">Cache-Control（HTTP1.1） <a class="header-anchor" href="#cache-control-http1-1" aria-label="Permalink to &quot;Cache-Control（HTTP1.1）&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Cache-Control:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">public</span><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 共享缓存，即由缓存代理服务器提供的缓存，响应可以被多个客户端缓存。</span></span>
<span class="line"><span style="color:#B392F0;">Cache-Control:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">private</span><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 私有缓存，响应只能被单个客户端缓存。</span></span>
<span class="line"><span style="color:#B392F0;">Cache-Control:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no-store</span><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 不使用缓存。</span></span>
<span class="line"><span style="color:#B392F0;">Cache-Control:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no-cache</span><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 使用缓存前，无论本地副本是否过期，都需要请求源服务器进行验证（协商缓存）。</span></span>
<span class="line"><span style="color:#B392F0;">Cache-Control:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">max-age=秒</span><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 设置缓存存储的最大期限，超过这个期限缓存被认为过期，时间是相对于请求的时间。</span></span>
<span class="line"><span style="color:#B392F0;">Cache-Control:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">s-maxage=秒</span><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 同 max-age，仅适用于代理服务器（共享缓存）。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Cache-Control:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">must-revalidate</span><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 如果本地副本未过期，则可继续供客户端使用，不需要向源服务器再验证；</span></span>
<span class="line"><span style="color:#6A737D;"># 如果本地副本已过期（比如已经超过max-age），在成功向源服务器验证之前，缓存不能用该资源响应后续请求。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Cache-Control:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy-revalidate</span><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;"># 同 must-revalidate，仅适用于共享缓存。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Pragma:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no-cache</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 用来向后兼容只支持 HTTP/1.0 协议的缓存服务器，与 Cache-Control: no-cache 效果一致。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Cache-Control:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">public</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 共享缓存，即由缓存代理服务器提供的缓存，响应可以被多个客户端缓存。</span></span>
<span class="line"><span style="color:#6F42C1;">Cache-Control:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">private</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 私有缓存，响应只能被单个客户端缓存。</span></span>
<span class="line"><span style="color:#6F42C1;">Cache-Control:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no-store</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 不使用缓存。</span></span>
<span class="line"><span style="color:#6F42C1;">Cache-Control:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no-cache</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 使用缓存前，无论本地副本是否过期，都需要请求源服务器进行验证（协商缓存）。</span></span>
<span class="line"><span style="color:#6F42C1;">Cache-Control:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">max-age=秒</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 设置缓存存储的最大期限，超过这个期限缓存被认为过期，时间是相对于请求的时间。</span></span>
<span class="line"><span style="color:#6F42C1;">Cache-Control:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">s-maxage=秒</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 同 max-age，仅适用于代理服务器（共享缓存）。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Cache-Control:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">must-revalidate</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 如果本地副本未过期，则可继续供客户端使用，不需要向源服务器再验证；</span></span>
<span class="line"><span style="color:#6A737D;"># 如果本地副本已过期（比如已经超过max-age），在成功向源服务器验证之前，缓存不能用该资源响应后续请求。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Cache-Control:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy-revalidate</span><span style="color:#24292E;">	</span><span style="color:#6A737D;"># 同 must-revalidate，仅适用于共享缓存。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Pragma:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no-cache</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 用来向后兼容只支持 HTTP/1.0 协议的缓存服务器，与 Cache-Control: no-cache 效果一致。</span></span></code></pre></div><p><code>TIP</code> 在 HTTP1.1 标准试图将缓存相关配置收敛进 Cache-Control 这样的大背景下，max-age 可以视作是对 Expires 能力的补位/替换。在当下的前端实践里，普遍会倾向于使用 max-age。但如果有对向下兼容有强诉求，那么 Expires 仍然是不可缺少的；当 Cache-Control 与 Expires 同时存在时，以 Cache-Control 为准。</p><h4 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h4><blockquote><p>浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。</p><p>如果服务端提示缓存资源未改动，返回状态码 304（Not Modified），资源会被重定向到浏览器缓存。</p></blockquote><h5 id="last-modified-if-modified-since-http1-0" tabindex="-1">Last-Modified &amp; If-Modified-Since（HTTP1.0） <a class="header-anchor" href="#last-modified-if-modified-since-http1-0" aria-label="Permalink to &quot;Last-Modified &amp; If-Modified-Since（HTTP1.0）&quot;">​</a></h5><blockquote><p>Last-Modified 表示资源的最后修改时间，是一个时间戳，如果启用了协商缓存，它会在首次请求时随着 Response Headers 返回。</p><p>If-Modified-Since 是一个请求首部字段，并且只能用在 GET 或 HEAD 请求中。客户端再次请求服务器时，请求头会包含这个字段，后面跟着在缓存中获取的资源的最后修改时间。</p></blockquote><ul><li><strong>工作原理</strong> - 服务端收到请求发现此请求头中有 If-Modified-Since 字段，会与被请求资源的最后修改时间进行对比，如果一致则会返回 304（Not Modified）和响应报文头，浏览器从缓存中获取数据即可。如果被修改了，就返回整个数据 200（OK）。</li><li><strong>痛点</strong>： <ul><li>如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为 If-Modified-Since 只能检查到以秒为最小计量单位的时间差。</li><li>如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。</li><li>编辑了文件，但文件的内容没有改变。服务端并不清楚我们是否真正改变了文件，它仍然通过最后编辑时间进行判断。因此这个资源在再次被请求时，会被当做新资源，进而引发一次完整的响应——不该重新请求的时候，也会重新请求。</li></ul></li></ul><h5 id="etag-if-none-match-http1-1" tabindex="-1">Etag &amp; If-None-Match（HTTP1.1） <a class="header-anchor" href="#etag-if-none-match-http1-1" aria-label="Permalink to &quot;Etag &amp; If-None-Match（HTTP1.1）&quot;">​</a></h5><blockquote><p>Etag 是一个响应首部字段，是根据实体内容生成的一段 hash 字符串，标识资源的状态，由服务端产生。</p><p>If-None-Match 是一个条件式的请求首部，如果请求资源时在请求首部加上这个字段，值为之前服务器返回的 Etag，当服务器上任务资源的 Etag 属性值与这个值相符时，服务器会返回不带实体的 304 响应。不相符时返回带有请求资源实体的 200 响应。</p></blockquote><p><code>TIP</code> Etag 的生成过程需要服务器额外付出开销，会影响服务端的性能，这是它的弊端。因此启用 Etag 需要审时度势。Etag 并不能替代 Last-Modified，它只能作为 Last-Modified 的补充和强化存在。 Etag 在感知文件变化上比 Last-Modified 更加准确。当 Etag 和 Last-Modified 同时存在时，以 Etag 为准。</p><h2 id="_2-dns-解析" tabindex="-1">2. DNS 解析 <a class="header-anchor" href="#_2-dns-解析" aria-label="Permalink to &quot;2. DNS 解析&quot;">​</a></h2><blockquote><p>DNS，Domain Name System/域名系统，一个面向互联网的将域名和 IP 地址相互映射的一个分布式数据库；是一个树状结构的记录、映射域名和 IP 地址的分布式系统；DNS 查询使用 UDP 协议。</p><p>通常情况下，主机向本地名称服务器的查询一般都是采用 <code>递归查询</code>，而本地名称服务器向 DNS(一级、二级、三级...)名称服务器采用 <code>迭代查询</code>。</p></blockquote><h3 id="递归查询" tabindex="-1">递归查询 <a class="header-anchor" href="#递归查询" aria-label="Permalink to &quot;递归查询&quot;">​</a></h3><blockquote><p><strong>触发条件:</strong> 1. <code>默认</code>触发 ；2. RD 设置为 1 触发。</p></blockquote><p>以 <code>本地名称服务器</code>为中心，DNS 客户端只是发出原始的域名查询请求报文，然后就一直处于等待状态，直到本地名称服务器发来了最终的查询结果；此时的本地名称服务器就相当于 <code>中介代理</code>的作用</p><h3 id="迭代查询" tabindex="-1">迭代查询 <a class="header-anchor" href="#迭代查询" aria-label="Permalink to &quot;迭代查询&quot;">​</a></h3><blockquote><p><strong>触发条件:</strong> 1. 在所配置的本地名称服务器上查询触发（因为本地名称服务器禁止使用递归查询）；2. RD 设置为 0 触发。</p></blockquote><p>以 <code>DNS客户端自己</code> 为中心；所有查询工作全部是 DNS 客户端自己进行；<code>DNS客户</code> 会按照顺序向本地名称服务器、一级名称服务器、二级名称服务器、权威名称服务器发出查询 DNS 的请求查询报文，这个过程中每一级服务器就会返回一个能解答这个查询的下一个名称服务器列表 A，获取到下个查询列表信息 A 后 DNS 客户会再向返回的列表 A 中发出请求，直到找到最终负责所查域名的名称服务器，从它得到最终结果。</p><h3 id="解析流程" tabindex="-1">解析流程 <a class="header-anchor" href="#解析流程" aria-label="Permalink to &quot;解析流程&quot;">​</a></h3><p>浏览器缓存 ==&gt; 本地 hosts 文件 ==&gt; 本地路由缓存 ==&gt; 本地 DNS 服务器 ==&gt; 各级域名服务器 ==&gt; 权威服务器 ==&gt; 缓存结果</p><h2 id="_3-建立-tcp-连接-三次握手" tabindex="-1">3. 建立 TCP 连接（三次握手） <a class="header-anchor" href="#_3-建立-tcp-连接-三次握手" aria-label="Permalink to &quot;3. 建立 TCP 连接（三次握手）&quot;">​</a></h2><p><img src="`+o+'" alt="img"></p><h2 id="_4-浏览器发起-http-请求-服务器处理-http-请求" tabindex="-1">4. 浏览器发起 HTTP 请求，服务器处理 HTTP 请求 <a class="header-anchor" href="#_4-浏览器发起-http-请求-服务器处理-http-请求" aria-label="Permalink to &quot;4. 浏览器发起 HTTP 请求，服务器处理 HTTP 请求&quot;">​</a></h2><p><img src="'+e+`" alt="img"></p><h3 id="请求方法" tabindex="-1">请求方法 <a class="header-anchor" href="#请求方法" aria-label="Permalink to &quot;请求方法&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">GET：请求一个指定资源的表示形式，使用</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">的请求应该只被用于获取数据。</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP/1.0</span></span>
<span class="line"><span style="color:#B392F0;">POST：将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用。</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP/1.0</span></span>
<span class="line"><span style="color:#B392F0;">HEAD：请求一个与</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">请求的响应相同的响应，但没有响应体，只返回报文头。</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP/1.0</span></span>
<span class="line"><span style="color:#B392F0;">PUT：请求有效载荷替换目标资源的所有当前表示，在指明的URL下存储一个文档(取代指定文档</span><span style="color:#E1E4E8;">)。 // HTTP/1.1</span></span>
<span class="line"><span style="color:#B392F0;">DELETE：删除指定的资源，请求服务器删除指定的页面。</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP/1.1</span></span>
<span class="line"><span style="color:#B392F0;">CONNECT:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">方法建立一个到由目标资源标识的服务器的隧道。</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP/1.1</span></span>
<span class="line"><span style="color:#B392F0;">OPTIONS:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">用于描述目标资源的通信选项。</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP/1.1</span></span>
<span class="line"><span style="color:#B392F0;">OPETION：请求一些选项的信息(允许客户端查看服务器的性能</span><span style="color:#E1E4E8;">)。 // HTTP/1.1</span></span>
<span class="line"><span style="color:#B392F0;">TRACE:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">沿着到目标资源的路径执行一个消息环回测试，主要用于测试或者诊断。</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP/1.1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">GET：请求一个指定资源的表示形式，使用</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GET</span><span style="color:#24292E;"> </span><span style="color:#032F62;">的请求应该只被用于获取数据。</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP/1.0</span></span>
<span class="line"><span style="color:#6F42C1;">POST：将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用。</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP/1.0</span></span>
<span class="line"><span style="color:#6F42C1;">HEAD：请求一个与</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GET</span><span style="color:#24292E;"> </span><span style="color:#032F62;">请求的响应相同的响应，但没有响应体，只返回报文头。</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP/1.0</span></span>
<span class="line"><span style="color:#6F42C1;">PUT：请求有效载荷替换目标资源的所有当前表示，在指明的URL下存储一个文档(取代指定文档</span><span style="color:#24292E;">)。 // HTTP/1.1</span></span>
<span class="line"><span style="color:#6F42C1;">DELETE：删除指定的资源，请求服务器删除指定的页面。</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP/1.1</span></span>
<span class="line"><span style="color:#6F42C1;">CONNECT:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">方法建立一个到由目标资源标识的服务器的隧道。</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP/1.1</span></span>
<span class="line"><span style="color:#6F42C1;">OPTIONS:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">用于描述目标资源的通信选项。</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP/1.1</span></span>
<span class="line"><span style="color:#6F42C1;">OPETION：请求一些选项的信息(允许客户端查看服务器的性能</span><span style="color:#24292E;">)。 // HTTP/1.1</span></span>
<span class="line"><span style="color:#6F42C1;">TRACE:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">沿着到目标资源的路径执行一个消息环回测试，主要用于测试或者诊断。</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP/1.1</span></span></code></pre></div><h2 id="_5-浏览器接收-http-响应" tabindex="-1">5. 浏览器接收 HTTP 响应 <a class="header-anchor" href="#_5-浏览器接收-http-响应" aria-label="Permalink to &quot;5. 浏览器接收 HTTP 响应&quot;">​</a></h2><p><img src="`+t+`" alt="img"></p><h3 id="响应状态码" tabindex="-1">响应状态码 <a class="header-anchor" href="#响应状态码" aria-label="Permalink to &quot;响应状态码&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">1XX：信息性状态码(接收请求正在处理</span><span style="color:#E1E4E8;">)。</span></span>
<span class="line"><span style="color:#B392F0;">2XX：成功状态码(请求正常处理完毕</span><span style="color:#E1E4E8;">)。</span></span>
<span class="line"><span style="color:#B392F0;">3XX：重定向状态码(需要进行附加操作以完成请求</span><span style="color:#E1E4E8;">)。</span></span>
<span class="line"><span style="color:#B392F0;">4XX：客户端错误状态码(服务器无法处理请求</span><span style="color:#E1E4E8;">)。</span></span>
<span class="line"><span style="color:#B392F0;">5XX：服务端错误状态码(服务器处理请求出错</span><span style="color:#E1E4E8;">)。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">100(继续</span><span style="color:#E1E4E8;">)请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</span></span>
<span class="line"><span style="color:#B392F0;">101(切换协议</span><span style="color:#E1E4E8;">)请求者已要求服务器切换协议，服务器已确认并准备切换。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">200(成功</span><span style="color:#E1E4E8;">)服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</span></span>
<span class="line"><span style="color:#B392F0;">201(已创建</span><span style="color:#E1E4E8;">)请求成功并且服务器创建了新的资源。</span></span>
<span class="line"><span style="color:#B392F0;">202(已接受</span><span style="color:#E1E4E8;">)服务器已接受请求，但尚未处理。</span></span>
<span class="line"><span style="color:#B392F0;">203(非授权信息</span><span style="color:#E1E4E8;">)服务器已成功处理了请求，但返回的信息可能来自另一来源。</span></span>
<span class="line"><span style="color:#B392F0;">204(无内容</span><span style="color:#E1E4E8;">)服务器成功处理了请求，但没有返回任何内容。</span></span>
<span class="line"><span style="color:#B392F0;">205(重置内容</span><span style="color:#E1E4E8;">)服务器成功处理了请求，但没有返回任何内容。</span></span>
<span class="line"><span style="color:#B392F0;">206(部分内容</span><span style="color:#E1E4E8;">)服务器成功处理了部分 GET 请求。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">300(多种选择</span><span style="color:#E1E4E8;">)针对请求，服务器可执行多种操作。服务器可根据请求者(</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">agent</span><span style="color:#E1E4E8;">)选择一项操作，或提供操作列表供请求者选择。</span></span>
<span class="line"><span style="color:#B392F0;">301(永久移动</span><span style="color:#E1E4E8;">)请求的网页已永久移动到新位置。服务器返回此响应(</span><span style="color:#B392F0;">对</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">或</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HEAD</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">请求的响应</span><span style="color:#E1E4E8;">)时，会自动将请求者转到新位置。</span></span>
<span class="line"><span style="color:#B392F0;">302(临时移动</span><span style="color:#E1E4E8;">)服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</span></span>
<span class="line"><span style="color:#B392F0;">303(查看其他位置</span><span style="color:#E1E4E8;">)请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</span></span>
<span class="line"><span style="color:#B392F0;">304(未修改</span><span style="color:#E1E4E8;">)自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</span></span>
<span class="line"><span style="color:#B392F0;">305(使用代理</span><span style="color:#E1E4E8;">)请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</span></span>
<span class="line"><span style="color:#B392F0;">307(临时重定向</span><span style="color:#E1E4E8;">)服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">400(错误请求</span><span style="color:#E1E4E8;">)表示客户端请求的语法错误，服务器无法理解，例如 url 含有非法字符、json 格式有问题。</span></span>
<span class="line"><span style="color:#B392F0;">401(未授权</span><span style="color:#E1E4E8;">)请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。</span></span>
<span class="line"><span style="color:#B392F0;">402表示保留，将来使用。</span></span>
<span class="line"><span style="color:#B392F0;">403(禁止</span><span style="color:#E1E4E8;">)表示服务器理解请求客户端的请求，但是拒绝请求。</span></span>
<span class="line"><span style="color:#B392F0;">404(未找到</span><span style="color:#E1E4E8;">)服务器无法根据客户端的请求找到资源(</span><span style="color:#B392F0;">网页</span><span style="color:#E1E4E8;">)。</span></span>
<span class="line"><span style="color:#B392F0;">405(方法禁用</span><span style="color:#E1E4E8;">)禁用请求中指定的方法。</span></span>
<span class="line"><span style="color:#B392F0;">406(不接受</span><span style="color:#E1E4E8;">)无法使用请求的内容特性响应请求的网页。</span></span>
<span class="line"><span style="color:#B392F0;">407(需要代理授权</span><span style="color:#E1E4E8;">)此状态代码与 401(</span><span style="color:#B392F0;">未授权</span><span style="color:#E1E4E8;">)类似，但指定请求者应当授权使用代理。</span></span>
<span class="line"><span style="color:#B392F0;">408(请求超时</span><span style="color:#E1E4E8;">)服务器等候请求时发生超时。</span></span>
<span class="line"><span style="color:#B392F0;">409(冲突</span><span style="color:#E1E4E8;">)服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。</span></span>
<span class="line"><span style="color:#B392F0;">410(已删除</span><span style="color:#E1E4E8;">)如果请求的资源已永久删除，服务器就会返回此响应。</span></span>
<span class="line"><span style="color:#B392F0;">411(需要有效长度</span><span style="color:#E1E4E8;">)服务器不接受不含有效内容长度标头字段的请求。</span></span>
<span class="line"><span style="color:#B392F0;">412(未满足前提条件</span><span style="color:#E1E4E8;">)服务器未满足请求者在请求中设置的其中一个前提条件。</span></span>
<span class="line"><span style="color:#B392F0;">413(请求实体过大</span><span style="color:#E1E4E8;">)表示响应实在太大。服务器拒绝处理当前请求，请求超过服务器所能处理和允许的最大值。</span></span>
<span class="line"><span style="color:#B392F0;">414(请求的</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">URI</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">过长</span><span style="color:#E1E4E8;">)请求的 URI(</span><span style="color:#B392F0;">通常为网址</span><span style="color:#E1E4E8;">)过长，服务器无法处理。</span></span>
<span class="line"><span style="color:#B392F0;">415(不支持的媒体类型</span><span style="color:#E1E4E8;">)请求的格式不受请求页面的支持。</span></span>
<span class="line"><span style="color:#B392F0;">416(请求范围不符合要求</span><span style="color:#E1E4E8;">)如果页面无法提供请求的范围，则服务器会返回此状态代码。</span></span>
<span class="line"><span style="color:#B392F0;">417(未满足期望值</span><span style="color:#E1E4E8;">)在请求头 Expect 指定的预期内容无法被服务器满足(</span><span style="color:#B392F0;">力不从心</span><span style="color:#E1E4E8;">)。</span></span>
<span class="line"><span style="color:#B392F0;">418表示我是一个茶壶。超文本咖啡馆控制协议，但是并没有被实际的</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HTTP</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">服务器实现。</span></span>
<span class="line"><span style="color:#B392F0;">420表示方法失效。</span></span>
<span class="line"><span style="color:#B392F0;">422表示不可处理的实体。请求格式正确，但是由于含有语义错误，无法响应。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">500(服务器内部错误</span><span style="color:#E1E4E8;">)服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。</span></span>
<span class="line"><span style="color:#B392F0;">501(尚未实施</span><span style="color:#E1E4E8;">)服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</span></span>
<span class="line"><span style="color:#B392F0;">502(错误网关</span><span style="color:#E1E4E8;">)服务器作为网关或代理，从上游服务器收到无效响应。</span></span>
<span class="line"><span style="color:#B392F0;">503(服务不可用</span><span style="color:#E1E4E8;">)服务器目前无法使用(</span><span style="color:#B392F0;">由于超载或停机维护</span><span style="color:#E1E4E8;">)。通常，这只是暂时状态。</span></span>
<span class="line"><span style="color:#B392F0;">504(网关超时</span><span style="color:#E1E4E8;">)服务器作为网关或代理，但是没有及时从上游服务器收到请求。</span></span>
<span class="line"><span style="color:#B392F0;">505(HTTP</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">版本不受支持</span><span style="color:#E1E4E8;">)服务器不支持请求中所用的 HTTP 版本。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">1XX：信息性状态码(接收请求正在处理</span><span style="color:#24292E;">)。</span></span>
<span class="line"><span style="color:#6F42C1;">2XX：成功状态码(请求正常处理完毕</span><span style="color:#24292E;">)。</span></span>
<span class="line"><span style="color:#6F42C1;">3XX：重定向状态码(需要进行附加操作以完成请求</span><span style="color:#24292E;">)。</span></span>
<span class="line"><span style="color:#6F42C1;">4XX：客户端错误状态码(服务器无法处理请求</span><span style="color:#24292E;">)。</span></span>
<span class="line"><span style="color:#6F42C1;">5XX：服务端错误状态码(服务器处理请求出错</span><span style="color:#24292E;">)。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">100(继续</span><span style="color:#24292E;">)请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</span></span>
<span class="line"><span style="color:#6F42C1;">101(切换协议</span><span style="color:#24292E;">)请求者已要求服务器切换协议，服务器已确认并准备切换。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">200(成功</span><span style="color:#24292E;">)服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。</span></span>
<span class="line"><span style="color:#6F42C1;">201(已创建</span><span style="color:#24292E;">)请求成功并且服务器创建了新的资源。</span></span>
<span class="line"><span style="color:#6F42C1;">202(已接受</span><span style="color:#24292E;">)服务器已接受请求，但尚未处理。</span></span>
<span class="line"><span style="color:#6F42C1;">203(非授权信息</span><span style="color:#24292E;">)服务器已成功处理了请求，但返回的信息可能来自另一来源。</span></span>
<span class="line"><span style="color:#6F42C1;">204(无内容</span><span style="color:#24292E;">)服务器成功处理了请求，但没有返回任何内容。</span></span>
<span class="line"><span style="color:#6F42C1;">205(重置内容</span><span style="color:#24292E;">)服务器成功处理了请求，但没有返回任何内容。</span></span>
<span class="line"><span style="color:#6F42C1;">206(部分内容</span><span style="color:#24292E;">)服务器成功处理了部分 GET 请求。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">300(多种选择</span><span style="color:#24292E;">)针对请求，服务器可执行多种操作。服务器可根据请求者(</span><span style="color:#6F42C1;">user</span><span style="color:#24292E;"> </span><span style="color:#032F62;">agent</span><span style="color:#24292E;">)选择一项操作，或提供操作列表供请求者选择。</span></span>
<span class="line"><span style="color:#6F42C1;">301(永久移动</span><span style="color:#24292E;">)请求的网页已永久移动到新位置。服务器返回此响应(</span><span style="color:#6F42C1;">对</span><span style="color:#24292E;"> </span><span style="color:#032F62;">GET</span><span style="color:#24292E;"> </span><span style="color:#032F62;">或</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HEAD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">请求的响应</span><span style="color:#24292E;">)时，会自动将请求者转到新位置。</span></span>
<span class="line"><span style="color:#6F42C1;">302(临时移动</span><span style="color:#24292E;">)服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</span></span>
<span class="line"><span style="color:#6F42C1;">303(查看其他位置</span><span style="color:#24292E;">)请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</span></span>
<span class="line"><span style="color:#6F42C1;">304(未修改</span><span style="color:#24292E;">)自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</span></span>
<span class="line"><span style="color:#6F42C1;">305(使用代理</span><span style="color:#24292E;">)请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理。</span></span>
<span class="line"><span style="color:#6F42C1;">307(临时重定向</span><span style="color:#24292E;">)服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">400(错误请求</span><span style="color:#24292E;">)表示客户端请求的语法错误，服务器无法理解，例如 url 含有非法字符、json 格式有问题。</span></span>
<span class="line"><span style="color:#6F42C1;">401(未授权</span><span style="color:#24292E;">)请求要求身份验证。对于需要登录的网页，服务器可能返回此响应。</span></span>
<span class="line"><span style="color:#6F42C1;">402表示保留，将来使用。</span></span>
<span class="line"><span style="color:#6F42C1;">403(禁止</span><span style="color:#24292E;">)表示服务器理解请求客户端的请求，但是拒绝请求。</span></span>
<span class="line"><span style="color:#6F42C1;">404(未找到</span><span style="color:#24292E;">)服务器无法根据客户端的请求找到资源(</span><span style="color:#6F42C1;">网页</span><span style="color:#24292E;">)。</span></span>
<span class="line"><span style="color:#6F42C1;">405(方法禁用</span><span style="color:#24292E;">)禁用请求中指定的方法。</span></span>
<span class="line"><span style="color:#6F42C1;">406(不接受</span><span style="color:#24292E;">)无法使用请求的内容特性响应请求的网页。</span></span>
<span class="line"><span style="color:#6F42C1;">407(需要代理授权</span><span style="color:#24292E;">)此状态代码与 401(</span><span style="color:#6F42C1;">未授权</span><span style="color:#24292E;">)类似，但指定请求者应当授权使用代理。</span></span>
<span class="line"><span style="color:#6F42C1;">408(请求超时</span><span style="color:#24292E;">)服务器等候请求时发生超时。</span></span>
<span class="line"><span style="color:#6F42C1;">409(冲突</span><span style="color:#24292E;">)服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息。</span></span>
<span class="line"><span style="color:#6F42C1;">410(已删除</span><span style="color:#24292E;">)如果请求的资源已永久删除，服务器就会返回此响应。</span></span>
<span class="line"><span style="color:#6F42C1;">411(需要有效长度</span><span style="color:#24292E;">)服务器不接受不含有效内容长度标头字段的请求。</span></span>
<span class="line"><span style="color:#6F42C1;">412(未满足前提条件</span><span style="color:#24292E;">)服务器未满足请求者在请求中设置的其中一个前提条件。</span></span>
<span class="line"><span style="color:#6F42C1;">413(请求实体过大</span><span style="color:#24292E;">)表示响应实在太大。服务器拒绝处理当前请求，请求超过服务器所能处理和允许的最大值。</span></span>
<span class="line"><span style="color:#6F42C1;">414(请求的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">URI</span><span style="color:#24292E;"> </span><span style="color:#032F62;">过长</span><span style="color:#24292E;">)请求的 URI(</span><span style="color:#6F42C1;">通常为网址</span><span style="color:#24292E;">)过长，服务器无法处理。</span></span>
<span class="line"><span style="color:#6F42C1;">415(不支持的媒体类型</span><span style="color:#24292E;">)请求的格式不受请求页面的支持。</span></span>
<span class="line"><span style="color:#6F42C1;">416(请求范围不符合要求</span><span style="color:#24292E;">)如果页面无法提供请求的范围，则服务器会返回此状态代码。</span></span>
<span class="line"><span style="color:#6F42C1;">417(未满足期望值</span><span style="color:#24292E;">)在请求头 Expect 指定的预期内容无法被服务器满足(</span><span style="color:#6F42C1;">力不从心</span><span style="color:#24292E;">)。</span></span>
<span class="line"><span style="color:#6F42C1;">418表示我是一个茶壶。超文本咖啡馆控制协议，但是并没有被实际的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HTTP</span><span style="color:#24292E;"> </span><span style="color:#032F62;">服务器实现。</span></span>
<span class="line"><span style="color:#6F42C1;">420表示方法失效。</span></span>
<span class="line"><span style="color:#6F42C1;">422表示不可处理的实体。请求格式正确，但是由于含有语义错误，无法响应。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">500(服务器内部错误</span><span style="color:#24292E;">)服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。</span></span>
<span class="line"><span style="color:#6F42C1;">501(尚未实施</span><span style="color:#24292E;">)服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</span></span>
<span class="line"><span style="color:#6F42C1;">502(错误网关</span><span style="color:#24292E;">)服务器作为网关或代理，从上游服务器收到无效响应。</span></span>
<span class="line"><span style="color:#6F42C1;">503(服务不可用</span><span style="color:#24292E;">)服务器目前无法使用(</span><span style="color:#6F42C1;">由于超载或停机维护</span><span style="color:#24292E;">)。通常，这只是暂时状态。</span></span>
<span class="line"><span style="color:#6F42C1;">504(网关超时</span><span style="color:#24292E;">)服务器作为网关或代理，但是没有及时从上游服务器收到请求。</span></span>
<span class="line"><span style="color:#6F42C1;">505(HTTP</span><span style="color:#24292E;"> </span><span style="color:#032F62;">版本不受支持</span><span style="color:#24292E;">)服务器不支持请求中所用的 HTTP 版本。</span></span></code></pre></div><h2 id="_6-渲染页面-关键渲染路径" tabindex="-1">6. 渲染页面（关键渲染路径） <a class="header-anchor" href="#_6-渲染页面-关键渲染路径" aria-label="Permalink to &quot;6. 渲染页面（关键渲染路径）&quot;">​</a></h2><p><img src="`+c+'" alt="img"></p><h2 id="_7-关闭-tcp-连接-四次挥手" tabindex="-1">7. 关闭 TCP 连接（四次挥手） <a class="header-anchor" href="#_7-关闭-tcp-连接-四次挥手" aria-label="Permalink to &quot;7. 关闭 TCP 连接（四次挥手）&quot;">​</a></h2><p><img src="'+r+'" alt="img"></p>',51),i=[y];function F(d,h,C,T,u,B){return a(),n("div",null,i)}const g=s(E,[["render",F]]);export{b as __pageData,g as default};
