import{_ as e,o,c as t,Q as a}from"./chunks/framework.32dba02b.js";const c="/devops-doc/assets/WebSocket.83240323.png",r="/devops-doc/assets/轮询.f763df85.png",u=JSON.parse('{"title":"连接与轮询","description":"","frontmatter":{},"headers":[],"relativePath":"Computer_Theory/计算机网络/Point/连接与轮询.md","filePath":"Computer_Theory/计算机网络/Point/连接与轮询.md","lastUpdated":1708332341000}'),s={name:"Computer_Theory/计算机网络/Point/连接与轮询.md"},i=a('<h1 id="连接与轮询" tabindex="-1">连接与轮询 <a class="header-anchor" href="#连接与轮询" aria-label="Permalink to &quot;连接与轮询&quot;">​</a></h1><h2 id="连接" tabindex="-1">连接 <a class="header-anchor" href="#连接" aria-label="Permalink to &quot;连接&quot;">​</a></h2><h3 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h3><blockquote><p>HTTP 是基于 TCP 的应用层协议，HTTP1.1 默认使用的是 TCP 长连接（在一段时间内保持 TCP 连接），后续 HTTP 请求可以复用此连接进行传输。</p></blockquote><h3 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h3><blockquote><p>WebSocket 在单个 TCP 连接上进行全双工通讯的协议。WebSocket 通信协议于 2011 年被 IETF 定为标准 RFC 6455，并由 RFC7936 补充规范。WebSocket API 也被 W3C 定为标准。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，<code>允许服务端主动向客户端推送数据</code>。</p><p>在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p></blockquote><p><img src="'+c+'" alt="img"></p><h2 id="轮询" tabindex="-1">轮询 <a class="header-anchor" href="#轮询" aria-label="Permalink to &quot;轮询&quot;">​</a></h2><blockquote><p><code>短轮询（Polling）</code> 的实现思路就是浏览器端每隔几秒钟向服务器端发送 HTTP 请求，服务端在收到请求后，不论是否有数据更新，都直接进行响应。</p><p><code>长轮询（Long-Polling）</code> 客户端发送请求后服务器端不会立即返回数据，服务器端会阻塞请求连接不会立即断开，直到服务器端有数据更新或者是连接超时才返回，客户端才再次发出请求新建连接、如此反复从而获取最新数据。</p></blockquote><p><img src="'+r+'" alt="img"></p>',10),n=[i];function l(d,p,_,h,b,P){return o(),t("div",null,n)}const k=e(s,[["render",l]]);export{u as __pageData,k as default};
